/* Generated By:JavaCC: Do not edit this line. MiniX10Parser.java */
import syntaxtree.*;
import java.util.Vector;


public class MiniX10Parser implements MiniX10ParserConstants {

  static final public File File() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   TopLevelDeclaration n1;
   NodeToken n2;
   Token n3;

   {
   }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = TopLevelDeclaration();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new File(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public TopLevelDeclaration TopLevelDeclaration() throws ParseException {
   NodeChoice n0;
   MainClass n1;
   ClassDeclaration n2;

   {
   }
    if (jj_2_1(12)) {
      n1 = MainClass();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_2(2)) {
      n2 = ClassDeclaration();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TopLevelDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   Identifier n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;

   {
   }
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(CLASS);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(LBRACE);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(PUBLIC);
                 n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(STATIC);
                  n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(VOID);
                n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(MAIN);
                n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(LPAREN);
             n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(STRING);
                  n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(LSQPAREN);
             n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(RSQPAREN);
             n21 = JTBToolkit.makeNodeToken(n22);
    n23 = Identifier();
    n25 = jj_consume_token(RPAREN);
             n24 = JTBToolkit.makeNodeToken(n25);
    n27 = jj_consume_token(LBRACE);
             n26 = JTBToolkit.makeNodeToken(n27);
    n28 = Statement();
    n30 = jj_consume_token(RBRACE);
             n29 = JTBToolkit.makeNodeToken(n30);
    n32 = jj_consume_token(RBRACE);
             n31 = JTBToolkit.makeNodeToken(n32);
     {if (true) return new MainClass(n0,n2,n4,n5,n7,n9,n11,n13,n15,n17,n19,n21,n23,n24,n26,n28,n29,n31);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclaration ClassDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   ClassMember n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      n6 = ClassMember();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n8 = jj_consume_token(RBRACE);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new ClassDeclaration(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassMember ClassMember() throws ParseException {
   NodeChoice n0;
   MethodDeclaration n1;
   ConstantDeclaration n2;
   UpdatableFieldDeclaration n3;

   {
   }
    if (jj_2_3(2147483647)) {
      n1 = MethodDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_4(2)) {
      n2 = ConstantDeclaration();
        n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        n3 = UpdatableFieldDeclaration();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ClassMember(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ConstantDeclaration ConstantDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Type n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STATIC);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(FINAL);
                n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Type();
    n7 = Identifier();
    n9 = jj_consume_token(ASSIGN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Expression();
    n12 = jj_consume_token(SEMICOLON);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new ConstantDeclaration(n0,n2,n4,n6,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableFieldDeclaration UpdatableFieldDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new UpdatableFieldDeclaration(n0,n2,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclaration MethodDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   ReturnType n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   FormalParameterList n7;
   NodeToken n8;
   Token n9;
   Block n10;

   {
   }
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ReturnType();
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case BOOLEAN:
    case INTEGER:
    case STRING:
    case DOUBLE:
    case REGION:
    case DIST:
    case PLACE:
    case POINT:
    case IDENTIFIER:
      n7 = FormalParameterList();
        n6.addNode(n7);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Block();
     {if (true) return new MethodDeclaration(n0,n2,n3,n4,n6,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterList FormalParameterList() throws ParseException {
   FormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalParameterRest n2;

   {
   }
    n0 = FormalParameter();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 124:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      n2 = FormalParameterRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new FormalParameterList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameter FormalParameter() throws ParseException {
   NodeChoice n0;
   FinalFormalParameter n1;
   UpdatableFormalParameter n2;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n1 = FinalFormalParameter();
        n0 = new NodeChoice(n1, 0);
      break;
    case BOOLEAN:
    case INTEGER:
    case STRING:
    case DOUBLE:
    case REGION:
    case DIST:
    case PLACE:
    case POINT:
    case IDENTIFIER:
      n2 = UpdatableFormalParameter();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new FormalParameter(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FinalFormalParameter FinalFormalParameter() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;

   {
   }
    n1 = jj_consume_token(FINAL);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
     {if (true) return new FinalFormalParameter(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableFormalParameter UpdatableFormalParameter() throws ParseException {
   Type n0;
   Identifier n1;

   {
   }
    n0 = Type();
    n1 = Identifier();
     {if (true) return new UpdatableFormalParameter(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameterRest FormalParameterRest() throws ParseException {
   NodeToken n0;
   Token n1;
   FormalParameter n2;

   {
   }
    n1 = jj_consume_token(124);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FormalParameter();
     {if (true) return new FormalParameterRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnType ReturnType() throws ParseException {
   NodeChoice n0;
   VoidType n1;
   Type n2;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      n1 = VoidType();
        n0 = new NodeChoice(n1, 0);
      break;
    case BOOLEAN:
    case INTEGER:
    case STRING:
    case DOUBLE:
    case REGION:
    case DIST:
    case PLACE:
    case POINT:
    case IDENTIFIER:
      n2 = Type();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ReturnType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public VoidType VoidType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(VOID);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new VoidType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
   NodeChoice n0;
   UpdatableArrayType n1;
   NonArrayType n2;

   {
   }
    if (jj_2_5(2147483647)) {
      n1 = UpdatableArrayType();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case STRING:
      case DOUBLE:
      case REGION:
      case DIST:
      case PLACE:
      case POINT:
      case IDENTIFIER:
        n2 = NonArrayType();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableArrayType UpdatableArrayType() throws ParseException {
   NonArrayType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   RankEquation n5;
   NodeToken n6;
   Token n7;

   {
   }
    n0 = NonArrayType();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(125);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = RankEquation();
    n7 = jj_consume_token(RSQPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new UpdatableArrayType(n0,n1,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public RankEquation RankEquation() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   IntegerLiteral n4;

   {
   }
    n1 = jj_consume_token(RANK);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(126);
             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = IntegerLiteral();
     {if (true) return new RankEquation(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public NonArrayType NonArrayType() throws ParseException {
   NodeChoice n0;
   BooleanType n1;
   IntegerType n2;
   DoubleType n3;
   StringType n4;
   PlaceType n5;
   DistType n6;
   RegionType n7;
   PointType n8;
   ClassNameType n9;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      n1 = BooleanType();
        n0 = new NodeChoice(n1, 0);
      break;
    case INTEGER:
      n2 = IntegerType();
        n0 = new NodeChoice(n2, 1);
      break;
    case DOUBLE:
      n3 = DoubleType();
        n0 = new NodeChoice(n3, 2);
      break;
    case STRING:
      n4 = StringType();
        n0 = new NodeChoice(n4, 3);
      break;
    case PLACE:
      n5 = PlaceType();
        n0 = new NodeChoice(n5, 4);
      break;
    case DIST:
      n6 = DistType();
        n0 = new NodeChoice(n6, 5);
      break;
    case REGION:
      n7 = RegionType();
        n0 = new NodeChoice(n7, 6);
      break;
    case POINT:
      n8 = PointType();
        n0 = new NodeChoice(n8, 7);
      break;
    case IDENTIFIER:
      n9 = ClassNameType();
        n0 = new NodeChoice(n9, 8);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NonArrayType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanType BooleanType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(BOOLEAN);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerType IntegerType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INTEGER);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DoubleType DoubleType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(DOUBLE);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DoubleType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringType StringType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PlaceType PlaceType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(PLACE);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PlaceType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DistType DistType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(DIST);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(125);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = RankEquation();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DistType(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public RegionType RegionType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(REGION);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(125);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = RankEquation();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new RegionType(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public PointType PointType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   RankEquation n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(POINT);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(125);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = RankEquation();
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PointType(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassNameType ClassNameType() throws ParseException {
   Identifier n0;

   {
   }
    n0 = Identifier();
     {if (true) return new ClassNameType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   Assignment n1;
   AsyncStatement n2;
   Block n3;
   FinishStatement n4;
   IfStatement n5;
   LoopStatement n6;
   PostfixStatement n7;
   PrintlnStatement n8;
   ReturnStatement n9;
   ThrowStatement n10;
   WhileStatement n11;

   {
   }
    if (jj_2_6(2147483647)) {
      n1 = Assignment();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASYNC:
        n2 = AsyncStatement();
        n0 = new NodeChoice(n2, 1);
        break;
      case LBRACE:
        n3 = Block();
        n0 = new NodeChoice(n3, 2);
        break;
      case FINISH:
        n4 = FinishStatement();
        n0 = new NodeChoice(n4, 3);
        break;
      case IF:
        n5 = IfStatement();
        n0 = new NodeChoice(n5, 4);
        break;
      case FOR:
        n6 = LoopStatement();
        n0 = new NodeChoice(n6, 5);
        break;
      case LPAREN:
      case LSQPAREN:
      case MINUS:
      case NEW:
      case THIS:
      case FACTORYBlock:
      case MATH:
      case HERE:
      case DISTUNIQUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        n7 = PostfixStatement();
        n0 = new NodeChoice(n7, 6);
        break;
      case PRINTLN:
        n8 = PrintlnStatement();
        n0 = new NodeChoice(n8, 7);
        break;
      case RETURN:
        n9 = ReturnStatement();
        n0 = new NodeChoice(n9, 8);
        break;
      case THROW:
        n10 = ThrowStatement();
        n0 = new NodeChoice(n10, 9);
        break;
      case WHILE:
        n11 = WhileStatement();
        n0 = new NodeChoice(n11, 10);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Assignment Assignment() throws ParseException {
   Expression n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   {
   }
    n0 = Expression();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Assignment(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public AsyncStatement AsyncStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Block n7;

   {
   }
    n1 = jj_consume_token(ASYNC);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Block();
     {if (true) return new AsyncStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   BlockStatement n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LSQPAREN:
      case LBRACE:
      case MINUS:
      case FINAL:
      case IF:
      case WHILE:
      case BOOLEAN:
      case INTEGER:
      case NEW:
      case RETURN:
      case STRING:
      case THIS:
      case PRINTLN:
      case FACTORYBlock:
      case THROW:
      case DOUBLE:
      case REGION:
      case DIST:
      case FINISH:
      case MATH:
      case PLACE:
      case POINT:
      case FOR:
      case HERE:
      case DISTUNIQUE:
      case ASYNC:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      n3 = BlockStatement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Block(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStatement BlockStatement() throws ParseException {
   NodeChoice n0;
   FinalVariableDeclaration n1;
   UpdatableVariableDeclaration n2;
   Statement n3;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      n1 = FinalVariableDeclaration();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_7(2147483647)) {
        n2 = UpdatableVariableDeclaration();
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LSQPAREN:
        case LBRACE:
        case MINUS:
        case IF:
        case WHILE:
        case NEW:
        case RETURN:
        case THIS:
        case PRINTLN:
        case FACTORYBlock:
        case THROW:
        case FINISH:
        case MATH:
        case FOR:
        case HERE:
        case DISTUNIQUE:
        case ASYNC:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
          n3 = Statement();
        n0 = new NodeChoice(n3, 2);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new BlockStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FinalVariableDeclaration FinalVariableDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(FINAL);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(ASSIGN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new FinalVariableDeclaration(n0,n2,n3,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public UpdatableVariableDeclaration UpdatableVariableDeclaration() throws ParseException {
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   {
   }
    n0 = Type();
    n1 = Identifier();
    n3 = jj_consume_token(ASSIGN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(SEMICOLON);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new UpdatableVariableDeclaration(n0,n1,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public FinishStatement FinishStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;

   {
   }
    n1 = jj_consume_token(FINISH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
     {if (true) return new FinishStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   ElseClause n9;

   {
   }
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      n9 = ElseClause();
        n8.addNode(n9);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
     {if (true) return new IfStatement(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public ElseClause ElseClause() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;

   {
   }
    n1 = jj_consume_token(ELSE);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
     {if (true) return new ElseClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public LoopStatement LoopStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   PointType n4;
   ExplodedSpecification n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   Statement n11;

   {
   }
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = PointType();
    n5 = ExplodedSpecification();
    n7 = jj_consume_token(125);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Statement();
     {if (true) return new LoopStatement(n0,n2,n4,n5,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public ExplodedSpecification ExplodedSpecification() throws ParseException {
   IdentifierList n0;

   {
   }
    n0 = IdentifierList();
     {if (true) return new ExplodedSpecification(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PointName PointName() throws ParseException {
   Identifier n0;

   {
   }
    n0 = Identifier();
     {if (true) return new PointName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierList IdentifierList() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   IdentifierRest n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LSQPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 124:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      n4 = IdentifierRest();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new IdentifierList(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierRest IdentifierRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
    n1 = jj_consume_token(124);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new IdentifierRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public PostfixStatement PostfixStatement() throws ParseException {
   Expression n0;
   NodeToken n1;
   Token n2;

   {
   }
    n0 = Expression();
    n2 = jj_consume_token(SEMICOLON);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new PostfixStatement(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintlnStatement PrintlnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(PRINTLN);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PrintlnStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStatement ReturnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LSQPAREN:
    case MINUS:
    case NEW:
    case THIS:
    case FACTORYBlock:
    case MATH:
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      n3 = Expression();
        n2.addNode(n3);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ReturnStatement(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public ThrowStatement ThrowStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(THROW);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(NEW);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RUNTIMEEXCEPTION);
                           n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(SEMICOLON);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new ThrowStatement(n0,n2,n4,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   {
   }
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new WhileStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   NodeChoice n0;
   InclusiveOrExpression n1;
   EqualsExpression n2;
   NotEqualsExpression n3;
   GreaterThanExpression n4;
   PlusExpression n5;
   MinusExpression n6;
   TimesExpression n7;
   DivideExpression n8;
   SinExpression n9;
   CosExpression n10;
   PowExpression n11;
   AbsExpression n12;
   MapExpression n13;
   RegionConstant n14;
   UnaryMinusExpression n15;
   CoercionToIntExpression n16;
   CoercionToDoubleExpression n17;
   TypeAnnotatedExpression n18;
   FactoryBlock n19;
   ArrayAccess n20;
   DotDistribution n21;
   DotIsFirst n22;
   DotMethodCall n23;
   DotIdentifier n24;
   PrimaryExpression n25;

   {
   }
    if (jj_2_8(2147483647)) {
      n1 = InclusiveOrExpression();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_9(2147483647)) {
      n2 = EqualsExpression();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_10(2147483647)) {
      n3 = NotEqualsExpression();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_11(2147483647)) {
      n4 = GreaterThanExpression();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_12(2147483647)) {
      n5 = PlusExpression();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_13(2147483647)) {
      n6 = MinusExpression();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_14(2147483647)) {
      n7 = TimesExpression();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_15(2147483647)) {
      n8 = DivideExpression();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_16(3)) {
      n9 = SinExpression();
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_17(3)) {
      n10 = CosExpression();
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_18(3)) {
      n11 = PowExpression();
        n0 = new NodeChoice(n11, 10);
    } else if (jj_2_19(3)) {
      n12 = AbsExpression();
        n0 = new NodeChoice(n12, 11);
    } else if (jj_2_20(2147483647)) {
      n13 = MapExpression();
        n0 = new NodeChoice(n13, 12);
    } else if (jj_2_21(2147483647)) {
      n14 = RegionConstant();
        n0 = new NodeChoice(n14, 13);
    } else if (jj_2_22(2147483647)) {
      n15 = UnaryMinusExpression();
        n0 = new NodeChoice(n15, 14);
    } else if (jj_2_23(2147483647)) {
      n16 = CoercionToIntExpression();
        n0 = new NodeChoice(n16, 15);
    } else if (jj_2_24(2147483647)) {
      n17 = CoercionToDoubleExpression();
        n0 = new NodeChoice(n17, 16);
    } else if (jj_2_25(2147483647)) {
      n18 = TypeAnnotatedExpression();
        n0 = new NodeChoice(n18, 17);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FACTORYBlock:
        n19 = FactoryBlock();
        n0 = new NodeChoice(n19, 18);
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_26(2147483647)) {
          n20 = ArrayAccess();
        n0 = new NodeChoice(n20, 19);
        } else if (jj_2_27(2147483647)) {
          n21 = DotDistribution();
        n0 = new NodeChoice(n21, 20);
        } else if (jj_2_28(2147483647)) {
          n22 = DotIsFirst();
        n0 = new NodeChoice(n22, 21);
        } else if (jj_2_29(2147483647)) {
          n23 = DotMethodCall();
        n0 = new NodeChoice(n23, 22);
        } else if (jj_2_30(2147483647)) {
          n24 = DotIdentifier();
        n0 = new NodeChoice(n24, 23);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case THIS:
          case HERE:
          case DISTUNIQUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
            n25 = PrimaryExpression();
        n0 = new NodeChoice(n25, 24);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public InclusiveOrExpression InclusiveOrExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(127);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new InclusiveOrExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualsExpression EqualsExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(126);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new EqualsExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public NotEqualsExpression NotEqualsExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(128);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new NotEqualsExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public GreaterThanExpression GreaterThanExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(GT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new GreaterThanExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public PlusExpression PlusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(PLUS);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new PlusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public MinusExpression MinusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(MINUS);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new MinusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public TimesExpression TimesExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(129);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new TimesExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DivideExpression DivideExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(130);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new DivideExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public SinExpression SinExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   {
   }
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(SIN);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new SinExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public CosExpression CosExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   {
   }
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(COS);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new CosExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public PowExpression PowExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeToken n12;
   Token n13;

   {
   }
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(POW);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(124);
             n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Expression();
    n13 = jj_consume_token(RPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new PowExpression(n0,n2,n4,n6,n8,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public AbsExpression AbsExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   {
   }
    n1 = jj_consume_token(MATH);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOT);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(ABS);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Expression();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new AbsExpression(n0,n2,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public MapExpression MapExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(131);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new MapExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public RegionConstant RegionConstant() throws ParseException {
   NodeToken n0;
   Token n1;
   ColonExpression n2;
   NodeOptional n3 = new NodeOptional();
   ColonRest n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LSQPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ColonExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 124:
      n4 = ColonRest();
        n3.addNode(n4);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new RegionConstant(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ColonRest ColonRest() throws ParseException {
   NodeToken n0;
   Token n1;
   ColonExpression n2;

   {
   }
    n1 = jj_consume_token(124);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ColonExpression();
     {if (true) return new ColonRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ColonExpression ColonExpression() throws ParseException {
   NodeChoice n0;
   ColonPair n1;
   Expression n2;

   {
   }
    if (jj_2_31(2147483647)) {
      n1 = ColonPair();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LSQPAREN:
      case MINUS:
      case NEW:
      case THIS:
      case FACTORYBlock:
      case MATH:
      case HERE:
      case DISTUNIQUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        n2 = Expression();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ColonExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ColonPair ColonPair() throws ParseException {
   Expression n0;
   NodeToken n1;
   Token n2;
   Expression n3;

   {
   }
    n0 = Expression();
    n2 = jj_consume_token(125);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
     {if (true) return new ColonPair(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryMinusExpression UnaryMinusExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;

   {
   }
    n1 = jj_consume_token(MINUS);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new UnaryMinusExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToIntExpression CoercionToIntExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;

   {
   }
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INTEGER);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
     {if (true) return new CoercionToIntExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public CoercionToDoubleExpression CoercionToDoubleExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;

   {
   }
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DOUBLE);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Expression();
     {if (true) return new CoercionToDoubleExpression(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeAnnotatedExpression TypeAnnotatedExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeAnnotation n2;
   NodeToken n3;
   Token n4;
   Expression n5;

   {
   }
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeAnnotation();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Expression();
     {if (true) return new TypeAnnotatedExpression(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeAnnotation TypeAnnotation() throws ParseException {
   NodeChoice n0;
   UpdatableArrayType n1;
   DistType n2;

   {
   }
    if (jj_2_32(2147483647)) {
      n1 = UpdatableArrayType();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_33(2147483647)) {
      n2 = DistType();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeAnnotation(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   Literal n1;
   This n2;
   AllocationExpression n3;
   Identifier n4;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      n1 = Literal();
        n0 = new NodeChoice(n1, 0);
      break;
    case THIS:
      n2 = This();
        n0 = new NodeChoice(n2, 1);
      break;
    case NEW:
      n3 = AllocationExpression();
        n0 = new NodeChoice(n3, 2);
      break;
    case IDENTIFIER:
      n4 = Identifier();
        n0 = new NodeChoice(n4, 3);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public This This() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(THIS);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new This(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FactoryBlock FactoryBlock() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(FACTORYBlock);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new FactoryBlock(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAccess ArrayAccess() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   ExpressionList n3;
   NodeToken n4;
   Token n5;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = ExpressionList();
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ArrayAccess(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public DotMethodCall DotMethodCall() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   ExpressionList n7;
   NodeToken n8;
   Token n9;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LSQPAREN:
    case MINUS:
    case NEW:
    case THIS:
    case FACTORYBlock:
    case MATH:
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      n7 = ExpressionList();
        n6.addNode(n7);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new DotMethodCall(n0,n1,n3,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public DotDistribution DotDistribution() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(DISTRIBUTION);
                       n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new DotDistribution(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIsFirst DotIsFirst() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(ISFIRST);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new DotIsFirst(n0,n1,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DotIdentifier DotIdentifier() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   {
   }
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new DotIdentifier(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public AllocationExpression AllocationExpression() throws ParseException {
   NodeChoice n0;
   NewObject n1;
   NewUpdatableArray n2;

   {
   }
    if (jj_2_34(3)) {
      n1 = NewObject();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_35(2147483647)) {
      n2 = NewUpdatableArray();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AllocationExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public NewObject NewObject() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   ExpressionList n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LSQPAREN:
    case MINUS:
    case NEW:
    case THIS:
    case FACTORYBlock:
    case MATH:
    case HERE:
    case DISTUNIQUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      n6 = ExpressionList();
        n5.addNode(n6);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new NewObject(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public NewUpdatableArray NewUpdatableArray() throws ParseException {
   NodeToken n0;
   Token n1;
   NonArrayType n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   ArrayInitializer n9;

   {
   }
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = NonArrayType();
    n4 = jj_consume_token(LSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    n7 = jj_consume_token(RSQPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    if (jj_2_36(2147483647)) {
      n9 = ArrayInitializer();
        n8.addNode(n9);
    } else {
      ;
    }
     {if (true) return new NewUpdatableArray(n0,n2,n3,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public Literal Literal() throws ParseException {
   NodeChoice n0;
   IntegerLiteral n1;
   FloatingPointLiteral n2;
   StringLiteral n3;
   HereLiteral n4;
   DistUnique n5;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n1 = IntegerLiteral();
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOATING_POINT_LITERAL:
      n2 = FloatingPointLiteral();
        n0 = new NodeChoice(n2, 1);
      break;
    case STRING_LITERAL:
      n3 = StringLiteral();
        n0 = new NodeChoice(n3, 2);
      break;
    case HERE:
      n4 = HereLiteral();
        n0 = new NodeChoice(n4, 3);
      break;
    case DISTUNIQUE:
      n5 = DistUnique();
        n0 = new NodeChoice(n5, 4);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Literal(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatingPointLiteral FloatingPointLiteral() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(FLOATING_POINT_LITERAL);
                                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatingPointLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringLiteral StringLiteral() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public HereLiteral HereLiteral() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(HERE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new HereLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DistUnique DistUnique() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(DISTUNIQUE);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DistUnique(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionList ExpressionList() throws ParseException {
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   ArgumentRest n2;

   {
   }
    n0 = Expression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 124:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_6;
      }
      n2 = ArgumentRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgumentRest ArgumentRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;

   {
   }
    n1 = jj_consume_token(124);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
     {if (true) return new ArgumentRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayInitializer ArrayInitializer() throws ParseException {
   NodeToken n0;
   Token n1;
   PointType n2;
   ExplodedSpecification n3;
   NodeToken n4;
   Token n5;
   Block n6;

   {
   }
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PointType();
    n3 = ExplodedSpecification();
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Block();
     {if (true) return new ArrayInitializer(n0,n2,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_3R_90() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(DIST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(125)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_scan_token(DISTUNIQUE)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(125)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(128)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(HERE)) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(PLACE)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(126)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(127)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_3R_158()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_135()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_123()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_122()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(FINISH)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_109()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(125)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(131)) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_3R_14()) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(MAIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(130)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(129)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_3R_14()) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(RANK)) return true;
    if (jj_scan_token(126)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(128)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(126)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_3R_135()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(127)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_3R_134()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_93()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(125)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(131)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(ASYNC)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ISFIRST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(POW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(THROW)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(RUNTIMEEXCEPTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DISTRIBUTION)) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_155()) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_3R_149()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_3R_148()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_3R_147()) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(MATH)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(FACTORYBlock)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(130)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(129)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(125)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_3R_127()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_10()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_scan_token(REGION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(125)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniX10ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000000,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x0,0x88102a00,0x8c102a00,0x4000000,0x88102a00,0x10000000,0x0,0x100a00,0x0,0x0,0x0,0x100a00,0x0,0x100a00,0x100a00,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000,0x4000,0x4000,0x20006,0x0,0x20006,0x20007,0x20006,0x20006,0x40c8008,0x40e800e,0x0,0x40c8008,0x0,0x0,0x4040008,0x4000000,0x40008,0x0,0x4040008,0x40008,0x4040008,0x4040008,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x800844,0x0,0x800844,0x800844,0x800844,0x800844,0x14001,0x814845,0x0,0x14001,0x0,0x0,0x10000,0x0,0x0,0x0,0x10000,0x0,0x10000,0x10000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x400002,0x10000000,0x400002,0x400002,0x400002,0x400002,0x6412e0,0x6412e2,0x0,0x6412e0,0x0,0x10000000,0x6410c0,0x0,0x6410c0,0x10000000,0x6410c0,0x6410c0,0x6410c0,0x6410c0,0x2410c0,0x10000000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[36];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniX10Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniX10Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
	      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniX10ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniX10Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniX10ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniX10Parser(MiniX10ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniX10ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[132];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 132; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 36; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
