//
// Generated by JTB 1.2.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "public"
 * f1 -> "class"
 * f2 -> Identifier()
 * f3 -> "{"
 * f4 -> "public"
 * f5 -> "static"
 * f6 -> "void"
 * f7 -> "main"
 * f8 -> "("
 * f9 -> "String"
 * f10 -> "["
 * f11 -> "]"
 * f12 -> Identifier()
 * f13 -> ")"
 * f14 -> "{"
 * f15 -> Statement()
 * f16 -> "}"
 * f17 -> "}"
 */
public class MainClass implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public Identifier f2;
   public NodeToken f3;
   public NodeToken f4;
   public NodeToken f5;
   public NodeToken f6;
   public NodeToken f7;
   public NodeToken f8;
   public NodeToken f9;
   public NodeToken f10;
   public NodeToken f11;
   public Identifier f12;
   public NodeToken f13;
   public NodeToken f14;
   public Statement f15;
   public NodeToken f16;
   public NodeToken f17;

   public MainClass(NodeToken n0, NodeToken n1, Identifier n2, NodeToken n3, NodeToken n4, NodeToken n5, NodeToken n6, NodeToken n7, NodeToken n8, NodeToken n9, NodeToken n10, NodeToken n11, Identifier n12, NodeToken n13, NodeToken n14, Statement n15, NodeToken n16, NodeToken n17) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
      f11 = n11;
      f12 = n12;
      f13 = n13;
      f14 = n14;
      f15 = n15;
      f16 = n16;
      f17 = n17;
   }

   public MainClass(Identifier n0, Identifier n1, Statement n2) {
      f0 = new NodeToken("public");
      f1 = new NodeToken("class");
      f2 = n0;
      f3 = new NodeToken("{");
      f4 = new NodeToken("public");
      f5 = new NodeToken("static");
      f6 = new NodeToken("void");
      f7 = new NodeToken("main");
      f8 = new NodeToken("(");
      f9 = new NodeToken("String");
      f10 = new NodeToken("[");
      f11 = new NodeToken("]");
      f12 = n1;
      f13 = new NodeToken(")");
      f14 = new NodeToken("{");
      f15 = n2;
      f16 = new NodeToken("}");
      f17 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public Object accept(visitor.ObjectVisitor v, Object argu) {
      return v.visit(this,argu);
   }
}

